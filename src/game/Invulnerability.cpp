#include "Invulnerability.h"

using namespace std;

#define INVULNERABILITY_TIMER "invulnerability"

// Minimum value of sprite renderer alpha
static const int minAlpha{120};

// Speed of alpha change
static const int minAlphaSpeed{100}, maxAlphaSpeed{1000};

Invulnerability::Invulnerability(GameObject &associatedObject)
    : WorldComponent(associatedObject) {}

void Invulnerability::Awake()
{
  weakSpriteRenderer = worldObject.RequireComponent<SpriteRenderer>();
}

bool Invulnerability::IsInvulnerable() const { return invulnerable; }

void Invulnerability::Update(float deltaTime)
{
  if (IsInvulnerable() == false)
    return;

  // Check timer
  auto invulnerabilityTime = worldObject.timer.Get(INVULNERABILITY_TIMER);

  if (invulnerabilityTime >= 0)
  {
    WearOff();
    return;
  }

  // Animate sprite renderer alpha
  LOCK(weakSpriteRenderer, spriteRenderer);

  // Get current color
  auto currentColor = spriteRenderer->GetColors().first;

  // Get frame speed
  auto alphaSpeed = Lerp(maxAlphaSpeed, minAlphaSpeed, abs(invulnerabilityTime) / lastTotalDuration);

  // Get next value of alpha
  currentColor.alpha = currentColor.alpha + alphaDirection * alphaSpeed * deltaTime;

  // Possibly switch direction
  if (currentColor.alpha <= minAlpha || currentColor.alpha >= 255)
  {
    currentColor.alpha = Clamp(currentColor.alpha, minAlpha, 255);
    alphaDirection = -alphaDirection;
  }

  // Set new alpha
  spriteRenderer->SetColor(currentColor);
}

void Invulnerability::WearOff()
{
  LOCK(weakSpriteRenderer, spriteRenderer);

  invulnerable = false;
  alphaDirection = -1;

  auto currentColor = spriteRenderer->GetColors().first;
  currentColor.alpha = 255;

  spriteRenderer->SetColor(currentColor);
}

void Invulnerability::SetInvulnerable(float seconds)
{
  invulnerable = true;
  lastTotalDuration = seconds;

  // Start timer
  worldObject.timer.Reset(INVULNERABILITY_TIMER, -seconds);
}
